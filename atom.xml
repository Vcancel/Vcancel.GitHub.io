<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Vcancel.GitHub.io</id>
    <title>Vcancel&apos;s Blog</title>
    <updated>2022-07-31T09:06:24.993Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Vcancel.GitHub.io"/>
    <link rel="self" href="https://Vcancel.GitHub.io/atom.xml"/>
    <logo>https://Vcancel.GitHub.io/images/avatar.png</logo>
    <icon>https://Vcancel.GitHub.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Vcancel&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[macOS >> 文件附加属性]]></title>
        <id>https://Vcancel.GitHub.io/post/macOS-AdditionalAttribute/</id>
        <link href="https://Vcancel.GitHub.io/post/macOS-AdditionalAttribute/">
        </link>
        <updated>2020-09-16T11:41:21.000Z</updated>
        <content type="html"><![CDATA[<p>当在命令行用<code>ls -l</code>命令查看文件列表的时候，看到文件权限后面有一个<code>@</code>符号，这说明该文件带有附加属性。</p>
<pre><code class="language-shell">--- ~ » ls -l
total 0
drwx------@  3 user  staff    96  8 28 15:57 Applications
drwx------@  4 user  staff   128 10 13 09:18 Desktop
</code></pre>
<h4 id="查看某文件的附加属性">查看某文件的附加属性</h4>
<ul>
<li><code>xattr -l filename</code></li>
</ul>
<h4 id="删除某文件的附加属性">删除某文件的附加属性</h4>
<ul>
<li><code>xattr -c filename</code></li>
</ul>
<h4 id="删除某目录下所有文件-目录的附加属性">删除某目录下所有文件、目录的附加属性</h4>
<ul>
<li><code>xattr -c -r path</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计原则]]></title>
        <id>https://Vcancel.GitHub.io/post/DesignPrinciples/</id>
        <link href="https://Vcancel.GitHub.io/post/DesignPrinciples/">
        </link>
        <updated>2020-09-02T13:04:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="i-开闭原则open-closed-principleocp">I. 开闭原则｜Open-Closed Principle｜OCP</h3>
<blockquote>
<p>对扩展开放，对修改关闭。</p>
</blockquote>
<h3 id="ii-依赖倒置原则dependence-inversion-principledip">II. 依赖倒置原则｜Dependence Inversion Principle｜DIP</h3>
<blockquote>
<p>高层模块不应该依赖底层模块，二者都应该依赖其抽象。<br>
抽象不应该依赖细节，细节应该依赖抽象。</p>
</blockquote>
<h3 id="iii-单一职责原则simple-responsibility-pinciplesrp">III. 单一职责原则｜Simple Responsibility Pinciple｜SRP</h3>
<blockquote>
<p>不要存在多于一个导致类变更的原因。</p>
</blockquote>
<h3 id="iv-接口隔离原则interface-segregation-principleisp">IV. 接口隔离原则｜Interface Segregation Principle｜ISP</h3>
<blockquote>
<p>使用多个专用接口，不使用单一的总接口。</p>
</blockquote>
<h3 id="v-最少知道原则least-knowledge-principlelkp">V. 最少知道原则｜Least Knowledge Principle｜LKP</h3>
<blockquote>
<p>一个对象应该对其他对象保持最少的了解。</p>
</blockquote>
<h3 id="vi-里氏替换原则liskov-substitution-principlelsp">VI. 里氏替换原则｜Liskov Substitution Principle｜LSP</h3>
<blockquote>
<p>若对于任意的类型为<code>T1</code>的对象<code>O1</code>，都有类型为<code>T2</code>的对象<code>O2</code>，使得以<code>T1</code>定义的所有程序<code>P</code>在所有的对象<code>O1</code>都替换成<code>O2</code>时，程序<code>P</code>的行为没有发生变化，则类型<code>T2</code>是类型<code>T1</code>的子类型。</p>
</blockquote>
<p><strong>引申含义：</strong></p>
<blockquote>
<p>子类可以扩展父类的功能，但不能改变父类原有的功能。</p>
</blockquote>
<h3 id="vii-合成复用原则composite-aggregate-reuse-principlecarp">VII. 合成复用原则｜Composite / Aggregate Reuse Principle｜CARP</h3>
<blockquote>
<p>尽量使用对象组合/聚合而不是继承关系达到软件复用的目的。<br>
<strong>白箱复用：</strong> 指继承，把所有的实现细节暴露给子类。<br>
<strong>黑箱复用：</strong> 指组合/聚合，无法获取类以外的实现细节。</p>
</blockquote>
<h3 id="总结">总结</h3>
<p><strong>设计原则是设计模式的基础，不要求代码完全遵循设计原则，适当的使用设计原则，不要刻意追求完美。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS >> icon图标制作]]></title>
        <id>https://Vcancel.GitHub.io/post/macOS-icon/</id>
        <link href="https://Vcancel.GitHub.io/post/macOS-icon/">
        </link>
        <updated>2020-08-30T06:03:41.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>准备一个<code>1024 * 1024</code>的png图片，假设名字为<code>pic.png</code></li>
<li>命令行<code>mkdir tmp.iconset</code>，创建一个临时目录存放不同大小的图片</li>
<li>把原图片转为不同大小的图片，并放入上面的临时目录</li>
<li>全部拷贝到命令行回车执行，执行结束之后去tmp.iconset查看十张图片是否生成好</li>
</ul>
<pre><code class="language-shell">sips -z 16 16 pic.png --out tmp.iconset/icon_16x16.png
sips -z 32 32 pic.png --out tmp.iconset/icon_16x16@2x.png
sips -z 32 32 pic.png --out tmp.iconset/icon_32x32.png
sips -z 64 64 pic.png --out tmp.iconset/icon_32x32@2x.png
sips -z 128 128 pic.png --out tmp.iconset/icon_128x128.png
sips -z 256 256 pic.png --out tmp.iconset/icon_128x128@2x.png
sips -z 256 256 pic.png --out tmp.iconset/icon_256x256.png
sips -z 512 512 pic.png --out tmp.iconset/icon_256x256@2x.png
sips -z 512 512 pic.png --out tmp.iconset/icon_512x512.png
sips -z 1024 1024 pic.png --out tmp.iconset/icon_512x512@2x.png
</code></pre>
<ul>
<li>通过iconutil生成icns文件<code>iconutil -c icns tmp.iconset -o Icon.icns</code></li>
<li>生成的<code>Icon.icns</code>就是图标文件</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux >> chmod命令]]></title>
        <id>https://Vcancel.GitHub.io/post/Linux-chmod/</id>
        <link href="https://Vcancel.GitHub.io/post/Linux-chmod/">
        </link>
        <updated>2020-08-20T02:28:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="文件目录-的权限包括"><strong>文件／目录</strong> 的权限包括：</h3>
<table>
<thead>
<tr>
<th style="text-align:center">权限</th>
<th style="text-align:center">英文</th>
<th style="text-align:center">缩写</th>
<th style="text-align:center">数字代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读</td>
<td style="text-align:center">read</td>
<td style="text-align:center">r</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">写</td>
<td style="text-align:center">write</td>
<td style="text-align:center">w</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">执行</td>
<td style="text-align:center">execute</td>
<td style="text-align:center">x</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h3 id="文件目录-的权限格式-rwxrwxrwx"><strong>文件／目录</strong> 的权限格式：<code>-rwxrwxrwx</code></h3>
<ul>
<li>第一个符号代表文件类型，&quot;-&quot; 符号表示该文件是非目录类型，&quot;d&quot; 符号表示目录类型。</li>
<li>没有相应权限则使用 “-” 符号替代。</li>
</ul>
<h3 id="文件目录-的权限详解"><strong>文件／目录</strong> 的权限详解：</h3>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">类型符号</th>
<th style="text-align:center">拥有者权限 [user]</th>
<th style="text-align:center">所在组权限[group]</th>
<th style="text-align:center">其他用户权限[other]</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">文件</td>
<td style="text-align:center">-</td>
<td style="text-align:center">rwx</td>
<td style="text-align:center">rwx</td>
<td style="text-align:center">rwx</td>
</tr>
<tr>
<td style="text-align:center">目录</td>
<td style="text-align:center">d</td>
<td style="text-align:center">rwx</td>
<td style="text-align:center">rwx</td>
<td style="text-align:center">rwx</td>
</tr>
</tbody>
</table>
<h1 id="修改权限">修改权限</h1>
<h2 id="方法一chmod-用户操作权限-文件">方法一：<code>chmod 用户+操作+权限 文件</code></h2>
<h4 id="用户部分">用户部分：</h4>
<ul>
<li>&quot;u&quot; 表示拥有者 [user]</li>
<li>&quot;g&quot; 表示拥有者所在群组 [group]</li>
<li>&quot;o&quot; 表示其他用户 [other]</li>
<li>&quot;a&quot; 表示全部用户 [all，包含前面三种用户范围]</li>
<li>若不指定，默认为拥有者权限 &quot;u&quot;</li>
</ul>
<h4 id="操作部分">操作部分：</h4>
<ul>
<li>&quot;+&quot; 表示增加权限</li>
<li>&quot;-&quot; 表示取消权限</li>
<li>&quot;=&quot; 表示赋值权限</li>
</ul>
<h4 id="权限部分">权限部分：</h4>
<ul>
<li>&quot;r&quot; 表示可读 [read]</li>
<li>&quot;w&quot; 表示可写 [write]</li>
<li>&quot;x&quot; 表示可执行权限 [execute]</li>
</ul>
<h4 id="文件部分">文件部分：</h4>
<ul>
<li>指定文件/目录全名</li>
<li>若不指定，表示操作对象为当前目录下的所有文件</li>
</ul>
<h3 id="注">注：</h3>
<ul>
<li>可以同时使用多种操作符添加和取消权限</li>
<li>可以使用 &quot;,&quot; 符号同时对不同用户范围修改权限</li>
</ul>
<h3 id="例">例：</h3>
<ul>
<li>指定文件 &quot;a&quot; 的初始权限为：<code>-rw-rw-r-x</code></li>
<li>将权限改为：<code>rwxr-xrw-</code> 的命令为<code>chmod ug+x,g-w,o+w-x a</code></li>
</ul>
<h2 id="方法二chmod-xxx-文件-x为数字">方法二：<code>chmod xxx 文件</code> [x为数字]</h2>
<h4 id="数字和权限对应关系">数字和权限对应关系：</h4>
<ul>
<li>每位数字代表对应用户类型所持有权限的代数总和</li>
</ul>
<h4 id="数字-xxx-部分">数字 [xxx] 部分：</h4>
<ul>
<li>三个数字从前到后分别表示 u、g、o 三种用户类型的访问权限</li>
</ul>
<h3 id="补充">补充：</h3>
<ul>
<li>递归修改目录文件及其子目录中的文件权限类型，可以使用 <code>-R</code> 选项</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构 >> 排序算法]]></title>
        <id>https://Vcancel.GitHub.io/post/DataStructure-Sorted/</id>
        <link href="https://Vcancel.GitHub.io/post/DataStructure-Sorted/">
        </link>
        <updated>2020-08-04T07:21:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好情况</th>
<th style="text-align:center">最坏情况</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">排序方式</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">内部排序</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">内部排序</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">内部排序</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlog<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>n)</td>
<td style="text-align:center">O(nlog<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>n)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">内部排序</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">外部排序</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(logn)</td>
<td style="text-align:center">内部排序</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">内部排序</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">计数排序</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">O(k)</td>
<td style="text-align:center">外部排序</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">桶排序</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">外部排序</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">基数排序</td>
<td style="text-align:center">O(n*k)</td>
<td style="text-align:center">O(n*k)</td>
<td style="text-align:center">O(n*k)</td>
<td style="text-align:center">O(n+k)</td>
<td style="text-align:center">外部排序</td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
<p><strong>稳定性</strong>：在原序列中，<code>r[i]=r[j]</code>，且<code>r[i]</code>在<code>r[j]</code>之前，而在排序后的序列中，<code>r[i]</code>仍在<code>r[j]</code>之前，则称这种排序算法是稳定的。<br>
<strong>排序方式</strong>：</p>
<ul>
<li><strong>内部排序</strong>：指待排序列完全存放在内存中所进行的排序过程。</li>
<li><strong>外部排序</strong>：指待排序记录存储在外存储器上，无法一次全部放入内存，期间需要内存与外存储器进行多次数据交换，最终完成的排序过程。</li>
</ul>
<h2 id="实现">实现</h2>
<p>设待排序序列长度为<code>N</code></p>
<h3 id="冒泡排序bubble-sort">冒泡排序｜Bubble Sort</h3>
<h4 id="基础算法">基础算法</h4>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>比较相邻两个元素，如果前面的元素大于后面的元素，就将这两个元素交换。</li>
<li>对数组的第<code>0</code>个元素到<code>N-1</code>个元素进行一次遍历后，最大的一个元素就移动到数组第<code>N-1</code>个位置。</li>
<li><code>N=N-1</code>，如果<code>N</code>不为<code>0</code>就重复前面二步，否则排序完成。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public static void bubbleSort(int[] arr) {
    int i, j;
    for (i = 0; i &lt; arr.length; i++) {
        for (j = 1; j &lt; arr.length - i; j++) {
            if (arr[j - 1] &gt; arr[j]) {
                int temp = arr[j - 1];
                arr[j - 1] = arr[j];
                arr[j] = temp;
            }
        }
    }
}
</code></pre>
<h4 id="优化算法">优化算法</h4>
<p><strong>思想</strong></p>
<blockquote>
<p>基于基础算法，若有一次遍历中未发生数据交换，则排序已经完成。</p>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public static void bubbleSort(int[] arr) {
    int j, k = arr.length;
    boolean flag = true;
    while (flag) {
        flag = false;
        for (j = 1; j &lt; k; j++) {
            if (arr[j - 1] &gt; arr[j]) {
                int temp = arr[j - 1];
                arr[j - 1] = arr[j];
                arr[j] = temp;
                flag = true;
            }
        }
        k--;
    }
}
</code></pre>
<h3 id="选择排序selection-sort">选择排序｜Selection Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>对数组进行一次遍历，找到最小元素，并与待排序序列首个元素交换。</li>
<li><code>N=N-1</code>，若<code>N&gt;0</code>，重复第一步，若<code>N=0</code>，排序完成。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public static void selectionSort(int[] arr) {
    for (int i = 0; i &lt; arr.length - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j &lt; arr.length; j++) {
            if (arr[j] &lt; arr[minIndex]) {
                minIndex = j;
            }
        }
        int temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
}
</code></pre>
<h3 id="插入排序insertion-sort">插入排序｜Insertion Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>在待排序序列中取出一个元素，遍历已排序序列，将元素插入到合适位置。</li>
<li><code>N=N-1</code>，若<code>N&gt;0</code>，重复第一步，若<code>N=0</code>，排序完成。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public static void insertionSort(int[] arr) {
	int n = arr.length;
	for (int i = 1; i &lt; n; i++) {
		for (int j = i; j &gt; 0 &amp;&amp; arr[j] &lt; arr[j - 1]; j--) {
			int temp = arr[j];
			arr[j] = arr[j - 1];
			arr[j - 1] = temp;
		}
	}
}
</code></pre>
<h3 id="希尔排序shell-sort">希尔排序｜Shell Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public static void shellSort(int[] arr) {
	int length = arr.length;
	int temp;
	for (int step = length / 2; step &gt;= 1; step /= 2) {
		for (int i = step; i &lt; length; i++) {
			temp = arr[i];
			int j = i - step;
			while (j &gt;= 0 &amp;&amp; arr[j] &gt; temp) {
				arr[j + step] = arr[j];
				j -= step;
			}
			arr[j + step] = temp;
		}
	}
}
</code></pre>
<h3 id="归并排序marge-sort">归并排序｜Marge Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<p>分治法：</p>
<ul>
<li>分割：递归地把当前序列平均分割成两半。</li>
<li>集成：在保持元素顺序的同时将上一步得到的子序列集成到一起（归并）。</li>
</ul>
</blockquote>
<p><strong>实现</strong></p>
<ul>
<li>递归版</li>
</ul>
<pre><code class="language-Java">/**
 * @param arr
 */
static void mergeSortRecursive(int[] arr, int[] result, int start, int end) {
	if (start &gt;= end)
		return;
	int len = end - start, mid = (len &gt;&gt; 1) + start;
	int start1 = start, end1 = mid;
	int start2 = mid + 1, end2 = end;
	mergeSortRecursive(arr, result, start1, end1);
	mergeSortRecursive(arr, result, start2, end2);
	int k = start;
	while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)
		result[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];
	while (start1 &lt;= end1)
		result[k++] = arr[start1++];
	while (start2 &lt;= end2)
		result[k++] = arr[start2++];
	for (k = start; k &lt;= end; k++)
		arr[k] = result[k];
}
public static void mergeSort(int[] arr) {
	int len = arr.length;
	int[] result = new int[len];
	mergeSortRecursive(arr, result, 0, len - 1);
}
</code></pre>
<ul>
<li>迭代版</li>
</ul>
<pre><code class="language-Java">public static void mergeSort(int[] arr) {
	int[] orderedArr = new int[arr.length];
	for (int i = 2; i &lt; arr.length * 2; i *= 2) {
		for (int j = 0; j &lt; (arr.length + i - 1) / i; j++) {
			int left = i * j;
			int mid = left + i / 2 &gt;= arr.length ? (arr.length - 1) : (left + i / 2);
			int right = i * (j + 1) - 1 &gt;= arr.length ? (arr.length - 1) : (i * (j + 1) - 1);
			int start = left, l = left, m = mid;
			while (l &lt; mid &amp;&amp; m &lt;= right) {
				if (arr[l] &lt; arr[m]) {
					orderedArr[start++] = arr[l++];
				} else {
					orderedArr[start++] = arr[m++];
				}
			}
			while (l &lt; mid)
				orderedArr[start++] = arr[l++];
			while (m &lt;= right)
				orderedArr[start++] = arr[m++];
			System.arraycopy(orderedArr, left, arr, left, right - left + 1);
		}
	}
}
</code></pre>
<h3 id="快速排序quick-sort">快速排序｜Quick Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<p>分治法：</p>
<ol>
<li>挑选基准值：从数列中挑出一个元素，称为“基准”。</li>
<li>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。</li>
<li>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 * @param low
 * @param high
 */
static int partition(int[] arr, int low, int high) {
	int pivot = arr[high];
	int pointer = low;
	for (int i = low; i &lt; high; i++) {
		if (arr[i] &lt;= pivot) {
			int temp = arr[i];
			arr[i] = arr[pointer];
			array[pointer] = temp;
			pointer++;
		}
	}
	int temp = arr[pointer];
	arr[pointer] = arr[high];
	arr[high] = temp;
	return pointer;
}

public static void quickSort(int[] arr, int low, int high) {
	if (low &lt; high) {
		int position = partition(arr, low, high);
		quickSort(arr, low, position - 1);
		quickSort(arr, position + 1, high);
	}
}
</code></pre>
<h3 id="堆排序heap-sort">堆排序｜Heap Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>建立一个堆<code>H[0...n-1]</code>。</li>
<li>把堆首（最大值）和堆尾互换。</li>
<li>把堆的尺寸缩小<code>1</code>，把新的数组顶端数据调整到相应位置。</li>
<li>重复步骤<code>2</code>，直到堆的尺寸为<code>1</code>。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public void heapSort(int[] arr) {
	int len = arr.length - 1;
	int beginIndex = (arr.length &gt;&gt; 1) - 1;
	for (int i = beginIndex; i &gt;= 0; i--)
		maxHeapify(i, len);
	for (int i = len; i &gt; 0; i--) {
		swap(0, i);
		maxHeapify(0, i - 1);
	}
}
private void swap(int i, int j) {
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}
private void maxHeapify(int index, int len) {
	int li = (index &lt;&lt; 1) + 1;
	int ri = li + 1;
	int cMax = li;
	if (li &gt; len) return;
	if (ri &lt;= len &amp;&amp; arr[ri] &gt; arr[li])
		cMax = ri;
	if (arr[cMax] &gt; arr[index]) {
		swap(cMax, index);
		maxHeapify(cMax, len);
	}
}
</code></pre>
<h3 id="计数排序count-sort">计数排序｜Count Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>找出待排序数组中最大和最小的元素。</li>
<li>统计数组中每个值为<code>i</code> 的元素出现的次数，存入计数数组<code>C</code>的第<code>i-minValue</code>项。</li>
<li>对所有的计数累加。</li>
<li>反向填充数组：将每个元素<code>i</code>放在新数组的第<code>C[i]</code>项，每放一个元素就将<code>C[i]</code>减去<code>1</code>。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 * @return b
 */
public static int[] countSort(int[] arr){
	int b[] = new int[arr.length];
	int max = arr[0], min = arr[0];
	for(int i : arr){
		if(i &gt; max){
			max = i;
		}
		if(i &lt; min){
			min = i;
		}
	}
	int k = max - min + 1;
	int c[] = new int[k];
	for(int i = 0; i &lt; arr.length; ++i){
		c[a[i] - min] += 1;
	}
	for(int i = 1; i &lt; c.length; ++i){
		c[i] = c[i] + c[i - 1];
	}
	for(int i = arr.length - 1; i &gt;= 0; --i){
		b[--c[arr[i] - min]] = arr[i];
	}
	return b;
}
</code></pre>
<h3 id="桶排序bucket-sort">桶排序｜Bucket Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>设置一个定量的数组当作空桶。</li>
<li>遍历序列，并把元素放到对应的桶去。</li>
<li>对每一个非空桶进行排序。</li>
<li>再将非空桶中元素放回原队列。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public void bucketSort(int[] arr) {
	int max = arr[0], min = arr[0];
	for (int a : arr) {
		if (max &lt; a)
			max = a;
		if (min &gt; a)
			min = a;
	}
	int bucketNum = max / 10 - min / 10 + 1;
	List buckList = new ArrayList&lt;List&lt;Integer&gt;&gt;();
	for (int i = 1; i &lt;= bucketNum; i++) {
		buckList.add(new ArrayList&lt;Integer&gt;());
	}
	for (int i = 0; i &lt; arr.length; i++) {
		int index = indexFor(arr[i], min, 10);
		((ArrayList&lt;Integer&gt;) buckList.get(index)).add(arr[i]);
	}
	ArrayList&lt;Integer&gt; bucket = null;
	int index = 0;
	for (int i = 0; i &lt; bucketNum; i++) {
		bucket = (ArrayList&lt;Integer&gt;) buckList.get(i);
		insertSort(bucket);
		for (int k : bucket) {
			arr[index++] = k;
		}
	}
}

private int indexFor(int a, int min, int step) {
	return (a - min) / step;
}

private void insertSort(List&lt;Integer&gt; bucket) {
	for (int i = 1; i &lt; bucket.size(); i++) {
		int temp = bucket.get(i);
		int j = i - 1;
		for (; j &gt;= 0 &amp;&amp; bucket.get(j) &gt; temp; j--) {
			bucket.set(j + 1, bucket.get(j));
		}
		bucket.set(j + 1, temp);
	}
}
</code></pre>
<h3 id="基数排序radix-sort">基数排序｜Radix Sort</h3>
<p><strong>思想</strong></p>
<blockquote>
<ol>
<li>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。</li>
<li>从最低位开始，依次进行一次排序。</li>
<li>排序完成以后，数列就变成一个有序序列。</li>
</ol>
</blockquote>
<p><strong>实现</strong></p>
<pre><code class="language-Java">/**
 * @param arr
 */
public static void radixSort(int[] arr) {
	if (null == arr || 0 == arr.length) return;
	int k = maxbit(arr);
	int radix = 1;
	for (int i = 0; i &lt; k; i++) {
		countingSort(arr, radix);
		radix *= 10;
	}
}

private static int maxbit(int[] arr) {
	int max = arr[0];
	for (int i = 1; i &lt; arr.length; i++) max = max &lt; arr[i] ? arr[i] : max;
	int d = 1;
	while ((max = max / 10) &gt; 0) d++;
	return d;
}

public static void countingSort(int[] arr, int radix) {
	int[] counts = new int[10];
	int len = arr.length;
	int[] buffer = new int[len];
	for (int i = 0; i &lt; len; i++) counts[(arr[i] / radix) % 10]++;
	for (int i = 1; i &lt; counts.length; i++) counts[i] = counts[i] + counts[i - 1];
	for (int i = len - 1; i &gt;= 0; i--) {
		buffer[counts[(arr[i] / radix ) % 10] - 1] = arr[i];
		counts[(arr[i] / radix) % 10] = counts[(arr[i] / radix) % 10] - 1;
	}
	for (int i = 0; i &lt; len; i++) arr[i] = buffer[i];
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Blog]]></title>
        <id>https://Vcancel.GitHub.io/post/Hello-Blog/</id>
        <link href="https://Vcancel.GitHub.io/post/Hello-Blog/">
        </link>
        <updated>2020-06-30T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h4 id="程序员的专属开场白">程序员的专属开场白：</h4>
<pre><code class="language-Java">public class HelloBlog {
    public static void main(String[] args) {
        System.out.println(&quot;Hello Blog&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
</feed>